language: python

env:
  - AWS_USER_ID="066234982609" AWS_ECR_API="066234982609.dkr.ecr.us-east-1.amazonaws.com/we-chat"
services:
  - docker
branches:
  only:
    - master

install:
  - docker-compose -f docker-compose.test.yml build

script:
  - docker-compose -f docker-compose.test.yml up -d
  # - sed -i -e 's/\r$/\n/' app/test.sh
  # - bash app/test.sh
  - docker-compose run web python manage.py test
  - sed -i -e 's/\r$/\n/' app/start.sh
  - sed -i -e 's/\r$/\n/' app/stop.sh
  - sed -i -e 's/\r$/\n/' app/install.sh #correct files endings
  - zip -r latest *
  - mkdir -p dpl_cd_upload
  - mv latest.zip dpl_cd_upload/latest.zip

after_success:
  - docker --version  # document the version travis is using
  - pip install --user awscli # install aws cli w/o sudo
  - export PATH=$PATH:$HOME/.local/bin # put aws in the path
  - eval $(aws ecr get-login --region us-east-1 --no-include-email) #needs AWS_ACCESS_KEY_ID and AWS_SECRET_ACCESS_KEY envvars
  - docker build -t $AWS_ECR_API:latest api
  - docker tag $AWS_ECR_API:latest
  - docker push $AWS_ECR_API:latest
  - docker images

deploy:
- provider: s3 #To upload the code to s3
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  local_dir: dpl_cd_upload #from where
  skip_cleanup: true #use cache (doesn't work...)
  bucket: "zipped-backend" #target bucket to use
  region: us-east-1 
  upload-dir: latest
- provider: codedeploy #Uploading to target group
  access_key_id: $AWS_ACCESS_KEY_ID
  secret_access_key: $AWS_SECRET_ACCESS_KEY
  bucket: "zipped-backend" #target bucket to use, definaed before
  key: latest/latest.zip #Source code, you can use any name but must be consistent
  bundle_type: zip
  application: we-chat
  deployment_group: Entrega-2
  region: us-east-1
  wait_until_deployed: true #wise thing to do
  on:
    branch: master